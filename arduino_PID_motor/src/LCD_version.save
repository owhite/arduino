#include <SoftwareSerial.h>
#include <SPI.h>

// SPI is incompatible with abs() so do this:
#ifdef abs
#undef abs
#endif

#define abs(x) ((x)>0?(x):-(x)) 

// piezo speaker
const int beepPin = 8;

// stepper pins
const int stepPin    = 2; // red 
const int dirPin     = 3; // orange
const int delayTime = 1000;

// some commands for the LCD
const int clearLCD = 12;
const int formFeed = 13;

// pin 2 of the rotary encoder (clk, purple) connects to Uno board pin 13
// pin 4 of the rotary encoder (digital out, grey) --> Uno board pin 12 (miso)
const int chipSelectPin = 10; // attaches to pin 6 of encoder, white

const int txPin    = 6;
const int upSwitchPin = 5;
const int dnSwitchPin = 4;

const int UP     = 1;
const int MIDDLE = 2;
const int DOWN   = 3;

int buttonState = MIDDLE;
int motorState = false;

unsigned long resetInterval = 400;
unsigned long previousMillis = 0;
unsigned long currentMillis = 0;

int oldPosition = 0;
int curPosition = 0;

SoftwareSerial mySerial = SoftwareSerial(255, txPin);

int positionThreshold = 2;

void setup() {

  // stepper stuff
  pinMode(stepPin, OUTPUT);
  digitalWrite(stepPin, LOW); 
  pinMode(dirPin, OUTPUT);
  digitalWrite(dirPin, LOW); 

  // SPI settings for Bourns EMS22A50-B28-LS6
  SPI.begin();
  SPI.setDataMode(SPI_MODE3);
  SPI.setClockDivider(SPI_CLOCK_DIV16); // its slow
  SPI.setBitOrder(MSBFIRST);
  pinMode(chipSelectPin, OUTPUT);
  delay(100);

  // other pins to play with
  pinMode(dnSwitchPin, INPUT_PULLUP);
  pinMode(upSwitchPin, INPUT_PULLUP);
  
  // say hi to the user
  tone(beepPin, 440, 100);

  // fluff for the LCD on start up
  mySerial.begin(9600);
  delay(100);
  mySerial.write(clearLCD);
  mySerial.write(17);           // Turn backlight on
  delay(5);                     // Required delay
  mySerial.print("SPI input");  // First line
  mySerial.write(formFeed);
  mySerial.print("...!");       // Second line
  mySerial.write(209);          // Quarter note
  mySerial.write(220);          // A tone
  delay(500);                        
}

void loop() {

  currentMillis = millis();
  // testing if some length of time has gone by
  // and when it does, check if encoder has changed a lot
  if ((currentMillis - previousMillis) >= resetInterval) {
    reportStatus();
    curPosition = readSPI();

    // only complain if the motor is not running
    if (motorState == false && 
	abs(oldPosition - curPosition) > positionThreshold) {
      throwError();
    }
    previousMillis = currentMillis;
    oldPosition = curPosition;
  }
  buttonState = getButtonState();

  if (buttonState == MIDDLE && motorState == true) {
    // user just stopped requesting motor movement
    mySerial.write(208);                // 64 note
    mySerial.write(230);                // A tone
    delay(100);
    motorState = false;
  }
  if (buttonState != MIDDLE && motorState == false) {
    // user just requested motor movement
    mySerial.write(208);                // 64 note
    mySerial.write(223);
    delay(100);
    motorState = true;
    reportStatus();
    runMotors();
  }
}

void myDelay() {
  int count = 0;
  while(count < 1000) {
    count = count + 1;
  }
  return;
}

void runMotors() {
  while(buttonState != MIDDLE) {
    digitalWrite(stepPin, HIGH);
    delayMicroseconds(delayTime);
    digitalWrite(stepPin, LOW);
    delayMicroseconds(delayTime);

    buttonState = getButtonState();
  }
}

void reportStatus() {
  mySerial.write(clearLCD);

  if (buttonState == UP) {
    mySerial.print("motor UP");
  }
  else if (buttonState == DOWN) {
    mySerial.print("motor DOWN");
  }
  else {
    mySerial.print("detecting");
  }

  mySerial.write(formFeed);
  mySerial.print(curPosition);
}

void throwError() {
  tone(beepPin, 840, 40);
}

int getButtonState() {
  // not doing any debouncing at this point
  // which might have impact when the motor is running
  if (!(digitalRead(upSwitchPin))) {
    digitalWrite(dirPin, HIGH); 
    return (UP);
  }
  if (!(digitalRead(dnSwitchPin))) {
    digitalWrite(dirPin, LOW); 
    return (DOWN);
  }  
  else {
    return MIDDLE;
  }
}

// code to read the SPI of Bourns encoder p/n EMS22A50-B28-LS6
// this is not consistent with the docs that seems to state
// that a whole byte of position data comes in, but it needed
// to get shifted over 3 bits. 
int readSPI() {
  int result = 0;
  byte inByte = 0;

  digitalWrite(chipSelectPin, LOW);  // assert chip select
  result = SPI.transfer(0x00);       // read a byte
  inByte = SPI.transfer(0x00);       // read a byte
  result = result << 3; // doesnt makes sense but make room for 3 more bits
  digitalWrite(chipSelectPin, HIGH); // deselect
  inByte &= 0b11100000; // mask off the first three bits
  inByte = inByte >> 5;  
  return (result | inByte); // add in the bits and return
}


